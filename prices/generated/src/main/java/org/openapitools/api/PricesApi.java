/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import org.openapitools.model.PriceNotFoundError;
import org.openapitools.model.ValidPriceResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-20T14:13:22.291533+02:00[Europe/Madrid]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "prices", description = "the prices API")
public interface PricesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /prices/getValidPrice : Get applicable price for a product
     * Get applicable price for a product in a particular date and for a brand.
     *
     * @param applicabilityDate The date to check the price for (required)
     * @param productId The ID of the product (required)
     * @param brandId  (required)
     * @return Applicable price found! (status code 200)
     *         or Price not found for given parameters (status code 404)
     */
    @Operation(
        operationId = "getValidPrice",
        summary = "Get applicable price for a product",
        description = "Get applicable price for a product in a particular date and for a brand.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Applicable price found!", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ValidPriceResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Price not found for given parameters", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PriceNotFoundError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/prices/getValidPrice",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ValidPriceResponse> getValidPrice(
        @NotNull @Parameter(name = "applicabilityDate", description = "The date to check the price for", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "applicabilityDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime applicabilityDate,
        @NotNull @Parameter(name = "productId", description = "The ID of the product", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "productId", required = true) String productId,
        @NotNull @Parameter(name = "brandId", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "brandId", required = true) String brandId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"validityPeriod\" : \"validityPeriod\", \"productId\" : \"productId\", \"brandId\" : \"brandId\", \"priceListId\" : \"priceListId\", \"validPrice\" : \"validPrice\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
